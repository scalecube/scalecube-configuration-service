/**
 * @api {ServiceMethod: entries} /entries entries
 * @apiName Entries
 * @apiGroup Methods
 * @apiVersion 0.0.0-CURRENT
 * @apiPermission Successful requests and responses
 *
 * @apiDescription This operation enable you to get all values (array of objects) by retrieving all the entries (keys) from the relevant Repository and enabled for each accessible permission level (read&write) granted for owner either admin or member role
 * @apiParam {Object} token The requested API key (token) which assigned with relevant role (permission level)
 * @apiParam {String} repository Specified name of the repository
 *
 * @apiSuccess {Object[]} entries List of all entries from the relevant configuration setting in the repository (Array of Objects)
 * @apiSuccess {Object} entries.value Specified node name applied for relevant configuration settings in the repository
 * @apiSuccess {String} entries.key Specified key name (entry) for relevant configuration setting in the repository
 *
 * @apiParamExample {json} WebSocket:
 * Request:
 *     {
 *         "q":"/configuration/entries",
 *         "sid": 1,
 *         "d":{
 *         "token": "API-TOKEN",
 *         "repository": "specifiedRepoName"
 *         }
 *     }
 *
 * Response:
 *
 *     {
 *         "q": "/configuration/entries",
 *         "sid": 1,
 *         "d":{
 *                "entries": [
 *                  {
 *                    "value": {
 *                               "instrumentInstance": {
 *                               "name": "Bitcoin",
 *                               "instrument": "BTC",
 *                               "DecimalPrecision" : "2",
 *                               "Rounding": "down"
 *                    },
 *                    "key": "specifiedKeyName"
 *                    }
 *                  },
 *                  {
 *                    "value": {
 *                               "instrumentInstance": {
 *                               "name": "Gold",
 *                               "instrument": "XAU",
 *                               "DecimalPrecision" : "2",
 *                               "Rounding": "down"
 *                    },
 *                    "key": "specifiedKeyName2"
 *                    }
 *                  },
 *                  {
 *                    "value": {
 *                               "instrumentInstance": {
 *                               "name": "USOIL",
 *                               "instrument": "OIL",
 *                               "DecimalPrecision" : "2",
 *                               "Rounding": "down"
 *                    },
 *                    "key": "specifiedKeyName3"
 *                    }
 *                  }
 *                  ]
 *              }
 *     }
 *     {
 *         "sig":1,
 *         "sid":1
 *     }
 *
 * @apiParamExample {json} RSocket:
 * Request:
 *     {
 *       "metadata":{
 *         "q": "/configuration/entries"
 *         },
 *         "data":{
 *         "token": "API-TOKEN",
 *         "repository": "specifiedRepoName"
 *         }
 *     }
 *
 * Response:
 *
 *     {
 *       "data":{
 *                "entries": [
 *                  {
 *                    "value": {
 *                               "instrumentInstance": {
 *                               "name": "Bitcoin",
 *                               "instrument": "BTC",
 *                               "DecimalPrecision" : "2",
 *                               "Rounding": "down"
 *                    },
 *                    "key": "specifiedKeyName"
 *                    }
 *                  },
 *                  {
 *                    "value": {
 *                               "instrumentInstance": {
 *                               "name": "Gold",
 *                               "instrument": "XAU",
 *                               "DecimalPrecision" : "2",
 *                               "Rounding": "down"
 *                    },
 *                    "key": "specifiedKeyName2"
 *                    }
 *                  },
 *                  {
 *                    "value": {
 *                               "instrumentInstance": {
 *                               "name": "USOIL",
 *                               "instrument": "OIL",
 *                               "DecimalPrecision" : "2",
 *                               "Rounding": "down"
 *                    },
 *                    "key": "specifiedKeyName3"
 *                    }
 *                  }
 *                  ]
 *              },
 *       "metadata":{
 *          "q": "/configuration/entries"
 *       }
 *     }
 *
 * @apiParamExample {json} HTTP:
 * Request:
 * https://localhost:port/configuration/entries (endpoint url)
 *
 * Body:
 *     {
 *         "token": "API-TOKEN",
 *         "repository": "specifiedRepoName"
 *     }
 *
 * Response:
 *     {
 *       "entries": [
 *         {
 *           "value": {
 *                      "instrumentInstance": {
 *                      "name": "Bitcoin",
 *                      "instrument": "BTC",
 *                      "DecimalPrecision" : "2",
 *                      "Rounding": "down"
 *           },
 *           "key": "specifiedKeyName"
 *           }
 *         },
 *         {
 *           "value": {
 *                      "instrumentInstance": {
 *                      "name": "Gold",
 *                      "instrument": "XAU",
 *                      "DecimalPrecision" : "2",
 *                      "Rounding": "down"
 *           },
 *           "key": "specifiedKeyName2"
 *           }
 *         },
 *         {
 *           "value": {
 *                      "instrumentInstance": {
 *                      "name": "USOIL",
 *                      "instrument": "OIL",
 *                      "DecimalPrecision" : "2",
 *                      "Rounding": "down"
 *           },
 *           "key": "specifiedKeyName3"
 *           }
 *         }
 *         ]
 *    }
 *
 * @apiError {String} field invalid API key (token)
 *
 * @apiErrorExample {json} Error-Response (WS):
 *    {
 *         "sig":2,
 *         "q":"/io.scalecube.services.error/500",
 *         "sid":1,
 *         "d":{
 *                 errorCode":500,
 *                 "errorMessage":"Token verification failed"
 *         }
 *    }
 *
 * @apiErrorExample {json} Error-Response (RS):
 *    {
 *         "data":{
 *         "errorCode":500,
 *         "errorMessage":"Token verification failed"
 *         },
 *         "metadata":{
 *             "q":"/io.scalecube.services.error/500"
 *         }
 *    }
 *
 * @apiErrorExample {json} Error-Response (HTTP):
 *    {
 *       errorCode":500,
 *       "errorMessage":"Token verification failed"
 *    }
 */